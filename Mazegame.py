from ursina import *
from ursina.prefabs.first_person_controller import FirstPersonController

__ = False


app = Ursina()

class player(FirstPersonController):
    def __init__(self):
        super().__init__(
            speed = 20,
            model = 'cube',
            collider = 'mesh',
            scale = 1
        )

class Warp(Entity):
    def __init__(self, i, j):
        super().__init__(
            warp = Entity(
                model = 'cube',
                #color = color.white,
                scale = (5,20,5),
                position = (i * 5, 0, j * 5),
                collider = 'box',
                texture = r'hangar_concrete_floor_4k.blend\textures\hangar_concrete_floor_diff_4k.jpg'
                
            )
        )
        self.player = player

    def update(self):
        if self.warp.intersects(self.player):
            self.player.position = (10, 10, 10)

class Coin(Entity):
    def __init__(self, x, y):
        super().__init__(
            coin = Entity(
                modle = 'sphere',
                color = color.yellow,
                scale = (10, 10, 10,),
                position = (x * 5, 0, y * 5)

            )
        )

class Exit(Entity):
    def __init__(self, i, j):
        super().__init__(
            model = 'cube',
            scale = (5,5,5),
            color = color.black90,
            position = (i*5,0,j*5),
            collider = 'box'
        )
        self.player = player
        self.text = Text(
            text = 'Eacape',
            scale = 2,
            origin =(0,0),
            visible = False
        )
        
        

    def update(self):
        self.clear()
    def clear(self):
        dis = (self.player.position - self.position).length()
        print(dis)
        if dis < 4:
            self.player.enabled = False
            self.text.visible = True

def input(key):
    if key == 'escape':
        app.quit()

player = player()
#EditorCamera()

Cat = Entity(
    model = 'model\cat.fbx',
    texture ='image\textures\cat.jpg',
    scale = 0.1,
    collider = 'mash',
    rotation = (5,1,0)

)


MAP =[
    [11,'p',11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,'e',11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,],
    [11,__,11,11,11,__,11,11,11,11,__,11,11,11,11,11,11,__,__,__,__,__,__,__,__,__,__,__,11,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,11,],
    [11,__,11,__,__,__,__,__,__,__,__,__,__,__,__,11,__,__,11,__,11,__,11,11,11,11,11,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,],
    [11,"w",11,11,__,11,__,11,11,__,11,11,11,00,11,11,__,11,__,__,11,11,__,__,__,__,__,11,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,],
    [11,__,11,__,__,11,__,11,__,__,11,__,11,11,11,11,__,11,11,__,11,11,11,__,11,11,__,11,__,__,__,11,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,__,11,__,__,11,11,11,__,11,11,__,__,__,__,11,__,11,__,__,__,__,__,__,11,__,__,__,__,11,__,11,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,__,11,11,__,__,__,__,__,__,__,__,11,11,__,11,__,11,__,11,11,11,11,11,11,11,__,11,__,11,__,__,__,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,__,11,11,__,00,__,11,11,11,__,11,11,__,__,__,__,11,__,__,__,__,__,__,__,__,__,11,11,11,11,__,11,__,__,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,__,11,11,__,11,__,11,__,11,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,__,__,__,11,__,11,11,11,__,__,__,__,__,__,__,__,__,__,__,__,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,__,11,11,__,11,11,11,__,__,__,11,11,__,__,__,11,__,__,11,__,__,__,11,__,11,__,11,11,__,11,__,__,11,__,11,11,11,__,11,11,11,11,11,11,11,__,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,__,11,__,__,11,11,11,11,11,__,11,__,__,11,__,11,11,__,__,__,11,__,11,__,11,__,11,__,__,11,11,__,11,__,11,11,11,__,11,11,__,__,__,11,11,__,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,__,11,__,11,11,__,11,__,11,__,11,__,11,11,__,__,__,__,11,11,11,__,11,__,11,__,11,__,11,11,11,__,__,__,11,11,11,__,11,__,__,11,__,11,11,__,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,__,__,__,11,__,__,__,__,11,__,11,__,__,11,11,11,11,__,11,__,__,__,__,__,11,__,11,__,__,11,__,__,11,__,11,11,11,__,11,__,11,11,__,__,11,__,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,11,11,11,11,11,__,11,11,11,__,11,11,__,__,11,__,__,__,11,__,11,__,11,11,11,__,11,11,__,11,11,__,11,__,11,11,11,__,11,__,__,__,11,__,__,__,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,],
    [11,__,__,__,__,__,__,__,__,__,__,11,11,11,__,11,__,11,__,11,11,11,11,11,11,11,__,11,__,__,11,11,__,11,__,11,11,11,__,11,__,11,11,11,11,11,11,11,11,11,__,__,__,__,__,__,__,11,11,11,__,11,],
    [11,__,11,11,11,11,11,11,11,11,11,11,11,11,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,__,__,11,__,11,11,11,__,11,__,__,__,__,__,__,11,11,11,11,__,11,11,11,11,11,__,11,__,11,__,11,],
    [11,__,11,__,__,__,11,__,__,__,__,__,__,__,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,11,__,11,__,11,11,11,__,11,11,11,11,11,11,__,__,__,__,__,__,11,__,__,__,11,__,__,__,11,__,11,],
    [11,__,11,__,11,11,11,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,11,11,11,__,11,11,11,__,11,11,11,11,11,11,11,11,11,11,11,11,11,__,11,__,11,11,11,11,11,__,11,],
    [11,__,__,__,__,__,__,__,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,__,__,__,__,__,__,11,11,11,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,11,__,__,__,__,__,__,__,11,],
    [11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]
    ]
   


for i in range(len(MAP)):
    for j in range(len(MAP[i])):
 
        if MAP[i][j]:
            if MAP[i][j] == 'p':
                player.position = (i * 5, 0, j * 5)
                continue

            if MAP[i][j] == 'e':
                esitdoor = Exit(i,j)
                continue

            if MAP[i][j] == 'd':
                Cat.position = (i * 5, 0, j * 5)
                continue

            if MAP[i][j] == 'w':
                warp = Warp(i,j)
                continue

            wall = Entity(
                model = 'cube',
                #color = color.white,
                scale = (5,20,5),
                position = (i * 5, 0, j * 5),
                collider = 'box'
            )
    

 
ground = Entity(
    model = 'plane',
    color = color.gray,
    position = (0, -2, 0),
    scale = (1000, 1, 1000),
    collider = 'mesh',
    Texture = 'grass'
    #texture = r'hangar_concrete_floor_4k.blend\textures\hangar_concrete_floor_disp_4k.png'
)

app.run()